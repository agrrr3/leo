#!/usr/bin/env php
<?php
$args = $argv;
$root = dirname(__DIR__);
$specs = $root . '/specs';
$src = $root . '/src';
$behavior = $args[1];

/**************************
 * Spec destinations
 **************************/
$assertBehaviorSpecs = $specs . '/behaviors/assert';
$bddBehaviorSpecs = $specs . '/behaviors/bdd';
$assertShared = $specs . '/shared/behaviors/assert';
$bddShared = $specs . '/shared/behaviors/bdd';
$matcherSpecs = $specs . '/matcher';

/**************************
 * Source destinations
 **************************/
$assertBehavior = $src . '/Behavior/Assert';
$bddBehavior = $src . '/Behavior/Bdd';
$matcher = $src . '/Matcher';

/**
 * Return a rendered template.
 *
 * @param $path
 * @param $vars
 * @return mixed|string
 */
function template($path, $vars) {
    $rootTemplatePath = __DIR__ . '/templates/';
    $path = $rootTemplatePath . $path;
    $contents = file_get_contents($path);

    foreach($vars as $var => $value) {
        $contents = str_replace('{{' . $var . '}}', $value, $contents);
    }
    return $contents;
}

/**
 * Write line to stdout
 *
 * @param $message
 */
function writeln($message) {
    fwrite(STDOUT, $message . PHP_EOL);
}

/**
 * Generate files for all destinations based on the passed
 * in template paths.
 *
 * @param $dests
 * @param $tpls
 * @param $destTpl
 */
function generate_for_all($dests, $tpls, $destTpl) {
    global $behavior;
    $name = ucfirst($behavior);
    $tpls = array_map(function($path) use ($behavior, $name) {
        return template($path, ['name' => $name, 'behavior' => $behavior]);
    }, $tpls);


    for ($i = 0; $i < count($dests); $i++) {
        $file = $dests[$i] . "/" . str_replace('{{behavior}}', $behavior, $destTpl);
        $file = str_replace('{{name}}', $name, $file);
        writeln("Creating $file");
        file_put_contents($file, $tpls[$i]);
    }
}

/**
 * Generate behavior specs
 *
 * @param $behavior
 */
function generate_behavior_specs() {
    global $assertBehaviorSpecs, $bddBehaviorSpecs;
    generate_for_all(
        [$assertBehaviorSpecs, $bddBehaviorSpecs],
        ['specs/behaviors/assert/spec.tpl', 'specs/behaviors/bdd/spec.tpl'],
        "{{behavior}}-behavior.spec.php"
    );
}

/**
 * Generate shared behaviors for sor behavior specs and interface specs.
 */
function generate_shared() {
    global $assertShared, $bddShared;
    generate_for_all(
        [$assertShared, $bddShared],
        ['specs/shared/assert/behavior.tpl', 'specs/shared/bdd/behavior.tpl'],
        "has-{{behavior}}-behavior.php"
    );
}

/**
 * Generate a matcher spec
 */
function generate_matcher_spec() {
    global $matcherSpecs;
    generate_for_all(
        [$matcherSpecs],
        ['specs/matcher/spec.tpl'],
        "{{behavior}}-matcher.spec.php"
    );
}

/**
 * Generate all specs for a behavior
 */
function generate_specs() {
    generate_behavior_specs();
    generate_shared();
    generate_matcher_spec();
}

/**
 * Generate behaviors
 */
function generate_behaviors() {
    global $assertBehavior, $bddBehavior;
    generate_for_all(
        [$assertBehavior, $bddBehavior],
        ['src/Behavior/Assert/class.tpl', 'src/Behavior/Bdd/class.tpl'],
        "{{name}}Behavior.php"
    );
}

/**
 * Generate a matcher
 */
function generate_matcher() {
    global $matcher;
    generate_for_all(
        [$matcher],
        ['src/Matcher/class.tpl'],
        "{{name}}Matcher.php"
    );
}

/**
 * Generate all source files
 */
function generate_source() {
    generate_behaviors();
    generate_matcher();
}

/**
 * Execute behavior generation
 */
writeln(PHP_EOL . "Generating behavior for behavior: $behavior");
generate_specs();
generate_source();
writeln("Finished generating for behavior: $behavior");
